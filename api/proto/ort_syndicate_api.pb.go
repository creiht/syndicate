// Code generated by protoc-gen-go.
// source: ort_syndicate_api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	ort_syndicate_api.proto

It has these top-level messages:
	RingMsg
	StoreResult
	StatusRequest
	StatusMsg
	EmptyMsg
	RingStatus
	Node
	ModifyMsg
	Conf
	RegisterRequest
	NodeConfig
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type RingMsg struct {
	Version  int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring     []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
	Builder  []byte `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	Deadline int64  `protobuf:"varint,4,opt,name=deadline" json:"deadline,omitempty"`
	Rollback int64  `protobuf:"varint,5,opt,name=rollback" json:"rollback,omitempty"`
}

func (m *RingMsg) Reset()         { *m = RingMsg{} }
func (m *RingMsg) String() string { return proto1.CompactTextString(m) }
func (*RingMsg) ProtoMessage()    {}

type StoreResult struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    bool   `protobuf:"varint,2,opt,name=ring" json:"ring,omitempty"`
	Builder bool   `protobuf:"varint,3,opt,name=builder" json:"builder,omitempty"`
	ErrMsg  string `protobuf:"bytes,4,opt" json:"ErrMsg,omitempty"`
}

func (m *StoreResult) Reset()         { *m = StoreResult{} }
func (m *StoreResult) String() string { return proto1.CompactTextString(m) }
func (*StoreResult) ProtoMessage()    {}

type StatusRequest struct {
	Ring    bool `protobuf:"varint,1,opt,name=ring" json:"ring,omitempty"`
	Builder bool `protobuf:"varint,2,opt,name=builder" json:"builder,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto1.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}

type StatusMsg struct {
	Version      int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ringstats    string `protobuf:"bytes,2,opt,name=ringstats" json:"ringstats,omitempty"`
	Builderstats string `protobuf:"bytes,3,opt,name=builderstats" json:"builderstats,omitempty"`
	Master       string `protobuf:"bytes,4,opt,name=master" json:"master,omitempty"`
}

func (m *StatusMsg) Reset()         { *m = StatusMsg{} }
func (m *StatusMsg) String() string { return proto1.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()    {}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()         { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string { return proto1.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()    {}

type RingStatus struct {
	Status  bool  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *RingStatus) Reset()         { *m = RingStatus{} }
func (m *RingStatus) String() string { return proto1.CompactTextString(m) }
func (*RingStatus) ProtoMessage()    {}

type Node struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Active    bool     `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	Capacity  uint32   `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"`
	Tiers     []string `protobuf:"bytes,4,rep,name=tiers" json:"tiers,omitempty"`
	Addresses []string `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	Meta      string   `protobuf:"bytes,6,opt,name=meta" json:"meta,omitempty"`
	Conf      []byte   `protobuf:"bytes,7,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()    {}

type ModifyMsg struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Id    uint64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *ModifyMsg) Reset()         { *m = ModifyMsg{} }
func (m *ModifyMsg) String() string { return proto1.CompactTextString(m) }
func (*ModifyMsg) ProtoMessage()    {}

type Conf struct {
	Conf            []byte `protobuf:"bytes,1,opt,name=conf,proto3" json:"conf,omitempty"`
	RestartRequired bool   `protobuf:"varint,2,opt,name=restartRequired" json:"restartRequired,omitempty"`
}

func (m *Conf) Reset()         { *m = Conf{} }
func (m *Conf) String() string { return proto1.CompactTextString(m) }
func (*Conf) ProtoMessage()    {}

type RegisterRequest struct {
	Hostname   string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Addrs      []string `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Tiers      []string `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`
	Disks      int32    `protobuf:"varint,4,opt,name=disks" json:"disks,omitempty"`
	Cores      int32    `protobuf:"varint,5,opt,name=cores" json:"cores,omitempty"`
	Hardwareid string   `protobuf:"bytes,6,opt,name=hardwareid" json:"hardwareid,omitempty"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto1.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}

type NodeConfig struct {
	Localid uint64 `protobuf:"varint,1,opt,name=localid" json:"localid,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *NodeConfig) Reset()         { *m = NodeConfig{} }
func (m *NodeConfig) String() string { return proto1.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RingDist service

type RingDistClient interface {
	Store(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
	Revert(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMsg, error)
	Setup(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
}

type ringDistClient struct {
	cc *grpc.ClientConn
}

func NewRingDistClient(cc *grpc.ClientConn) RingDistClient {
	return &ringDistClient{cc}
}

func (c *ringDistClient) Store(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Revert(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Revert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/proto.RingDist/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Setup(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RingDist service

type RingDistServer interface {
	Store(context.Context, *RingMsg) (*StoreResult, error)
	Revert(context.Context, *RingMsg) (*StoreResult, error)
	Status(context.Context, *StatusRequest) (*StatusMsg, error)
	Setup(context.Context, *RingMsg) (*StoreResult, error)
}

func RegisterRingDistServer(s *grpc.Server, srv RingDistServer) {
	s.RegisterService(&_RingDist_serviceDesc, srv)
}

func _RingDist_Store_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RingMsg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Store(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingDist_Revert_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RingMsg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Revert(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingDist_Status_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(StatusRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Status(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingDist_Setup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RingMsg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Setup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RingDist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RingDist",
	HandlerType: (*RingDistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _RingDist_Store_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _RingDist_Revert_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RingDist_Status_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _RingDist_Setup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for RingMgr service

type RingMgrClient interface {
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	ModNode(ctx context.Context, in *ModifyMsg, opts ...grpc.CallOption) (*RingStatus, error)
	SetConf(ctx context.Context, in *Conf, opts ...grpc.CallOption) (*RingStatus, error)
	SetActive(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	GetVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingStatus, error)
	RegisterNode(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*NodeConfig, error)
}

type ringMgrClient struct {
	cc *grpc.ClientConn
}

func NewRingMgrClient(cc *grpc.ClientConn) RingMgrClient {
	return &ringMgrClient{cc}
}

func (c *ringMgrClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.RingMgr/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMgrClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.RingMgr/RemoveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMgrClient) ModNode(ctx context.Context, in *ModifyMsg, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.RingMgr/ModNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMgrClient) SetConf(ctx context.Context, in *Conf, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.RingMgr/SetConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMgrClient) SetActive(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.RingMgr/SetActive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMgrClient) GetVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.RingMgr/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringMgrClient) RegisterNode(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*NodeConfig, error) {
	out := new(NodeConfig)
	err := grpc.Invoke(ctx, "/proto.RingMgr/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RingMgr service

type RingMgrServer interface {
	AddNode(context.Context, *Node) (*RingStatus, error)
	RemoveNode(context.Context, *Node) (*RingStatus, error)
	ModNode(context.Context, *ModifyMsg) (*RingStatus, error)
	SetConf(context.Context, *Conf) (*RingStatus, error)
	SetActive(context.Context, *Node) (*RingStatus, error)
	GetVersion(context.Context, *EmptyMsg) (*RingStatus, error)
	RegisterNode(context.Context, *RegisterRequest) (*NodeConfig, error)
}

func RegisterRingMgrServer(s *grpc.Server, srv RingMgrServer) {
	s.RegisterService(&_RingMgr_serviceDesc, srv)
}

func _RingMgr_AddNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Node)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).AddNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingMgr_RemoveNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Node)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).RemoveNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingMgr_ModNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ModifyMsg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).ModNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingMgr_SetConf_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Conf)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).SetConf(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingMgr_SetActive_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Node)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).SetActive(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingMgr_GetVersion_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(EmptyMsg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).GetVersion(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingMgr_RegisterNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RegisterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RingMgrServer).RegisterNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RingMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RingMgr",
	HandlerType: (*RingMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _RingMgr_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _RingMgr_RemoveNode_Handler,
		},
		{
			MethodName: "ModNode",
			Handler:    _RingMgr_ModNode_Handler,
		},
		{
			MethodName: "SetConf",
			Handler:    _RingMgr_SetConf_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _RingMgr_SetActive_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _RingMgr_GetVersion_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _RingMgr_RegisterNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
