// Code generated by protoc-gen-go.
// source: syndicate_api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	syndicate_api.proto

It has these top-level messages:
	EmptyMsg
	RingStatus
	Node
	ModifyMsg
	RingConf
	Conf
	SubscriberID
	RegisterRequest
	HardwareProfile
	Disk
	NodeConfig
	Ring
	SearchResult
	RingMsg
	StoreResult
	StatusRequest
	StatusMsg
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto1.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RingStatus struct {
	Status  bool  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *RingStatus) Reset()                    { *m = RingStatus{} }
func (m *RingStatus) String() string            { return proto1.CompactTextString(m) }
func (*RingStatus) ProtoMessage()               {}
func (*RingStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Node struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Active    bool     `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	Capacity  uint32   `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"`
	Tiers     []string `protobuf:"bytes,4,rep,name=tiers" json:"tiers,omitempty"`
	Addresses []string `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	Meta      string   `protobuf:"bytes,6,opt,name=meta" json:"meta,omitempty"`
	Conf      []byte   `protobuf:"bytes,7,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ModifyMsg struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Id    uint64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *ModifyMsg) Reset()                    { *m = ModifyMsg{} }
func (m *ModifyMsg) String() string            { return proto1.CompactTextString(m) }
func (*ModifyMsg) ProtoMessage()               {}
func (*ModifyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RingConf struct {
	Status *RingStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Conf   *Conf       `protobuf:"bytes,2,opt,name=conf" json:"conf,omitempty"`
}

func (m *RingConf) Reset()                    { *m = RingConf{} }
func (m *RingConf) String() string            { return proto1.CompactTextString(m) }
func (*RingConf) ProtoMessage()               {}
func (*RingConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RingConf) GetStatus() *RingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RingConf) GetConf() *Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

type Conf struct {
	Conf            []byte `protobuf:"bytes,1,opt,name=conf,proto3" json:"conf,omitempty"`
	RestartRequired bool   `protobuf:"varint,2,opt,name=restartRequired" json:"restartRequired,omitempty"`
}

func (m *Conf) Reset()                    { *m = Conf{} }
func (m *Conf) String() string            { return proto1.CompactTextString(m) }
func (*Conf) ProtoMessage()               {}
func (*Conf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SubscriberID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *SubscriberID) Reset()                    { *m = SubscriberID{} }
func (m *SubscriberID) String() string            { return proto1.CompactTextString(m) }
func (*SubscriberID) ProtoMessage()               {}
func (*SubscriberID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RegisterRequest struct {
	Hostname string           `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Addrs    []string         `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Tiers    []string         `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`
	Hardware *HardwareProfile `protobuf:"bytes,4,opt,name=hardware" json:"hardware,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegisterRequest) GetHardware() *HardwareProfile {
	if m != nil {
		return m.Hardware
	}
	return nil
}

type HardwareProfile struct {
	Memtotal uint64  `protobuf:"varint,1,opt,name=memtotal" json:"memtotal,omitempty"`
	Memfree  uint64  `protobuf:"varint,2,opt,name=memfree" json:"memfree,omitempty"`
	Cpus     int64   `protobuf:"varint,3,opt,name=cpus" json:"cpus,omitempty"`
	Disks    []*Disk `protobuf:"bytes,4,rep,name=disks" json:"disks,omitempty"`
}

func (m *HardwareProfile) Reset()                    { *m = HardwareProfile{} }
func (m *HardwareProfile) String() string            { return proto1.CompactTextString(m) }
func (*HardwareProfile) ProtoMessage()               {}
func (*HardwareProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HardwareProfile) GetDisks() []*Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

type Disk struct {
	Device string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Size   uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Used   uint64 `protobuf:"varint,4,opt,name=used" json:"used,omitempty"`
}

func (m *Disk) Reset()                    { *m = Disk{} }
func (m *Disk) String() string            { return proto1.CompactTextString(m) }
func (*Disk) ProtoMessage()               {}
func (*Disk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type NodeConfig struct {
	Localid uint64 `protobuf:"varint,1,opt,name=localid" json:"localid,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto1.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Ring struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *Ring) Reset()                    { *m = Ring{} }
func (m *Ring) String() string            { return proto1.CompactTextString(m) }
func (*Ring) ProtoMessage()               {}
func (*Ring) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SearchResult struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto1.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchResult) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type RingMsg struct {
	Version  int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring     []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
	Builder  []byte `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	Deadline int64  `protobuf:"varint,4,opt,name=deadline" json:"deadline,omitempty"`
	Rollback int64  `protobuf:"varint,5,opt,name=rollback" json:"rollback,omitempty"`
}

func (m *RingMsg) Reset()                    { *m = RingMsg{} }
func (m *RingMsg) String() string            { return proto1.CompactTextString(m) }
func (*RingMsg) ProtoMessage()               {}
func (*RingMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type StoreResult struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    bool   `protobuf:"varint,2,opt,name=ring" json:"ring,omitempty"`
	Builder bool   `protobuf:"varint,3,opt,name=builder" json:"builder,omitempty"`
	ErrMsg  string `protobuf:"bytes,4,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
}

func (m *StoreResult) Reset()                    { *m = StoreResult{} }
func (m *StoreResult) String() string            { return proto1.CompactTextString(m) }
func (*StoreResult) ProtoMessage()               {}
func (*StoreResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type StatusRequest struct {
	Ring    bool `protobuf:"varint,1,opt,name=ring" json:"ring,omitempty"`
	Builder bool `protobuf:"varint,2,opt,name=builder" json:"builder,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type StatusMsg struct {
	Version      int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ringstats    string `protobuf:"bytes,2,opt,name=ringstats" json:"ringstats,omitempty"`
	Builderstats string `protobuf:"bytes,3,opt,name=builderstats" json:"builderstats,omitempty"`
	Master       string `protobuf:"bytes,4,opt,name=master" json:"master,omitempty"`
}

func (m *StatusMsg) Reset()                    { *m = StatusMsg{} }
func (m *StatusMsg) String() string            { return proto1.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()               {}
func (*StatusMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto1.RegisterType((*EmptyMsg)(nil), "proto.EmptyMsg")
	proto1.RegisterType((*RingStatus)(nil), "proto.RingStatus")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*ModifyMsg)(nil), "proto.ModifyMsg")
	proto1.RegisterType((*RingConf)(nil), "proto.RingConf")
	proto1.RegisterType((*Conf)(nil), "proto.Conf")
	proto1.RegisterType((*SubscriberID)(nil), "proto.SubscriberID")
	proto1.RegisterType((*RegisterRequest)(nil), "proto.RegisterRequest")
	proto1.RegisterType((*HardwareProfile)(nil), "proto.HardwareProfile")
	proto1.RegisterType((*Disk)(nil), "proto.Disk")
	proto1.RegisterType((*NodeConfig)(nil), "proto.NodeConfig")
	proto1.RegisterType((*Ring)(nil), "proto.Ring")
	proto1.RegisterType((*SearchResult)(nil), "proto.SearchResult")
	proto1.RegisterType((*RingMsg)(nil), "proto.RingMsg")
	proto1.RegisterType((*StoreResult)(nil), "proto.StoreResult")
	proto1.RegisterType((*StatusRequest)(nil), "proto.StatusRequest")
	proto1.RegisterType((*StatusMsg)(nil), "proto.StatusMsg")
}

var fileDescriptor0 = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xde, 0x89, 0xff, 0x2b, 0xce, 0x3a, 0xf4, 0xae, 0x56, 0x56, 0x84, 0x60, 0x99, 0x53, 0x56,
	0x88, 0xb0, 0x6b, 0x96, 0x0b, 0x08, 0xa4, 0x68, 0xb3, 0x5a, 0x38, 0x2c, 0x42, 0x6d, 0xb4, 0x07,
	0x2e, 0xa8, 0x3d, 0xd3, 0x49, 0x5a, 0x19, 0x7b, 0x4c, 0x77, 0xdb, 0x28, 0x1c, 0xe0, 0xcc, 0x81,
	0xd7, 0xe0, 0x69, 0x78, 0x25, 0x24, 0xaa, 0x6a, 0x7a, 0x7e, 0xec, 0x58, 0xc4, 0x9c, 0xa6, 0xaa,
	0xba, 0xaa, 0xfa, 0xab, 0xdf, 0x1e, 0x78, 0xe4, 0x6e, 0x17, 0xa9, 0x49, 0x94, 0xd7, 0x3f, 0xa9,
	0xa5, 0x39, 0x5b, 0xda, 0xdc, 0xe7, 0xa2, 0xc3, 0x9f, 0x18, 0xa0, 0xff, 0x7a, 0xbe, 0xf4, 0xb7,
	0x6f, 0xdd, 0x55, 0xfc, 0x35, 0x80, 0x34, 0x8b, 0xab, 0xa9, 0x57, 0x7e, 0xe5, 0xc4, 0x13, 0xe8,
	0x3a, 0xa6, 0xc6, 0xd1, 0xd3, 0xe8, 0xb4, 0x2f, 0x03, 0x27, 0xc6, 0xd0, 0x5b, 0x6b, 0xeb, 0x4c,
	0xbe, 0x18, 0x1f, 0xe0, 0x41, 0x4b, 0x96, 0x6c, 0xfc, 0x57, 0x04, 0xed, 0xef, 0xf2, 0x54, 0x8b,
	0x87, 0x70, 0x60, 0x52, 0x36, 0x6b, 0x4b, 0xa4, 0xc8, 0x95, 0x4a, 0xbc, 0x59, 0x6b, 0xb6, 0x40,
	0x57, 0x05, 0x27, 0x4e, 0xa0, 0x9f, 0xa8, 0xa5, 0x4a, 0x8c, 0xbf, 0x1d, 0xb7, 0xf0, 0xe4, 0x48,
	0x56, 0xbc, 0x78, 0x0c, 0x1d, 0x6f, 0xd0, 0xf1, 0xb8, 0xfd, 0xb4, 0x75, 0x3a, 0x90, 0x05, 0x23,
	0xde, 0x87, 0x81, 0x4a, 0x53, 0xab, 0x9d, 0xd3, 0x6e, 0xdc, 0xe1, 0x93, 0x5a, 0x20, 0x04, 0xb4,
	0xe7, 0xda, 0xab, 0x71, 0x17, 0x7d, 0x0d, 0x24, 0xd3, 0x24, 0x4b, 0xf2, 0xc5, 0xe5, 0xb8, 0x87,
	0xb2, 0xa1, 0x64, 0x3a, 0x7e, 0x05, 0x83, 0xb7, 0x79, 0x6a, 0x2e, 0x29, 0x6a, 0x71, 0x0c, 0xad,
	0x1b, 0x7d, 0xcb, 0x68, 0x07, 0x92, 0x48, 0xba, 0x7a, 0xad, 0xb2, 0x55, 0x81, 0x16, 0xaf, 0x66,
	0x26, 0x04, 0xd5, 0x2a, 0x83, 0x8a, 0xdf, 0x41, 0x9f, 0xb2, 0xf5, 0x0a, 0x1d, 0x8a, 0x67, 0x1b,
	0xb9, 0x3a, 0x9c, 0xbc, 0x57, 0x24, 0xf9, 0xac, 0x4e, 0x67, 0x95, 0xbe, 0x0f, 0x03, 0x9e, 0x03,
	0x56, 0x3c, 0x0c, 0x8a, 0xe4, 0x25, 0x80, 0xbb, 0x80, 0x36, 0xfb, 0x2c, 0x81, 0x47, 0x35, 0x70,
	0x71, 0x0a, 0x23, 0x0c, 0xd5, 0x2b, 0xeb, 0xa5, 0xfe, 0x79, 0x65, 0xac, 0x4e, 0x43, 0x46, 0xb7,
	0xc5, 0xf1, 0x07, 0x30, 0x9c, 0xae, 0x66, 0x2e, 0xb1, 0x66, 0xa6, 0xed, 0xb7, 0x17, 0x8d, 0x92,
	0x0c, 0x18, 0xfd, 0x9f, 0x11, 0x8c, 0xa4, 0xbe, 0x32, 0xce, 0x6b, 0x4b, 0x46, 0x68, 0x4e, 0xe5,
	0xb8, 0xce, 0x9d, 0x5f, 0xa8, 0xb9, 0x0e, 0x9a, 0x15, 0x4f, 0x39, 0xa1, 0x3c, 0x3b, 0xbc, 0x8f,
	0xcb, 0xc1, 0x4c, 0x5d, 0xa4, 0x56, 0xb3, 0x48, 0x13, 0xf4, 0xa3, 0x6c, 0xfa, 0x8b, 0xb2, 0x1a,
	0xab, 0x47, 0x61, 0x3e, 0x09, 0x61, 0x7e, 0x13, 0xc4, 0xdf, 0xdb, 0xfc, 0xd2, 0x64, 0x5a, 0x56,
	0x7a, 0xf1, 0x6f, 0x30, 0xda, 0x3a, 0x24, 0x38, 0x73, 0x3d, 0xf7, 0xb9, 0x57, 0x59, 0xe8, 0xa5,
	0x8a, 0xa7, 0x26, 0x44, 0xfa, 0xd2, 0xea, 0xa2, 0x48, 0x6d, 0x59, 0xb2, 0x9c, 0xb6, 0xe5, 0xca,
	0x71, 0xa1, 0x5a, 0x92, 0x69, 0xf1, 0x11, 0x74, 0x52, 0xe3, 0x6e, 0x8a, 0x5e, 0xaa, 0x93, 0x7e,
	0x81, 0x32, 0x59, 0x9c, 0xc4, 0x3f, 0x42, 0x9b, 0x58, 0x6a, 0xd5, 0x54, 0xaf, 0x4d, 0x52, 0x66,
	0x20, 0x70, 0xe4, 0x76, 0xa9, 0xfc, 0x75, 0x68, 0x09, 0xa6, 0x49, 0xe6, 0xcc, 0xaf, 0x3a, 0xf4,
	0x04, 0xd3, 0x24, 0x5b, 0x39, 0x2c, 0x4b, 0xbb, 0x90, 0x11, 0x1d, 0x7f, 0x01, 0x40, 0x63, 0x41,
	0x55, 0x35, 0x57, 0x04, 0x3d, 0xcb, 0x13, 0x95, 0x55, 0x13, 0x52, 0xb2, 0x64, 0x6b, 0xb1, 0x61,
	0xf8, 0x0e, 0xac, 0x38, 0xd1, 0xf1, 0x4b, 0x68, 0x53, 0x13, 0x35, 0xa7, 0x2e, 0xda, 0x98, 0xba,
	0x9d, 0x56, 0x2f, 0xb0, 0xfa, 0x5a, 0xd9, 0xe4, 0x5a, 0x6a, 0xb7, 0xca, 0x3c, 0x25, 0x60, 0x81,
	0x08, 0xa8, 0x3d, 0x9b, 0x09, 0x20, 0x54, 0xb2, 0x38, 0x89, 0xff, 0x88, 0xa0, 0x47, 0x37, 0xd1,
	0x48, 0xfc, 0xaf, 0xcb, 0x48, 0x7b, 0xb6, 0x32, 0x59, 0xaa, 0x2d, 0x67, 0x62, 0x28, 0x4b, 0x96,
	0x2a, 0x98, 0x6a, 0x95, 0x66, 0x66, 0x51, 0x34, 0x42, 0x4b, 0x56, 0x3c, 0x9d, 0xd9, 0x3c, 0xcb,
	0x66, 0x2a, 0xb9, 0xc1, 0x41, 0xe6, 0xb3, 0x92, 0x8f, 0xe7, 0x70, 0x38, 0xf5, 0xb9, 0xd5, 0x01,
	0xfd, 0x7e, 0x70, 0xfa, 0xbb, 0xe1, 0xf4, 0x6b, 0x38, 0x58, 0xdb, 0xd7, 0xd6, 0x62, 0x80, 0x0c,
	0x06, 0x6b, 0xab, 0x99, 0x8b, 0xbf, 0x82, 0xa3, 0x30, 0xa4, 0x61, 0x10, 0x4a, 0xb7, 0xd1, 0x6e,
	0xb7, 0x07, 0x1b, 0x6e, 0xe3, 0xdf, 0x61, 0x50, 0x98, 0xff, 0x77, 0xea, 0x70, 0x75, 0x91, 0x23,
	0x5a, 0x03, 0x2e, 0xb4, 0x51, 0x2d, 0x10, 0x31, 0x0c, 0x83, 0xbf, 0x42, 0xa1, 0xc5, 0x0a, 0x1b,
	0x32, 0xc2, 0x3f, 0x57, 0x34, 0xb0, 0x25, 0xfe, 0x82, 0x9b, 0xfc, 0xd3, 0x41, 0x04, 0xe5, 0x8a,
	0x17, 0x1f, 0x43, 0xef, 0x3c, 0x4d, 0x79, 0x0f, 0x37, 0xeb, 0x7c, 0x72, 0x77, 0x27, 0xc5, 0x0f,
	0xc4, 0x19, 0xae, 0x7c, 0x3d, 0xcf, 0xd7, 0x7a, 0x4f, 0xfd, 0xe7, 0xd0, 0xc3, 0xcd, 0xc9, 0xca,
	0xc7, 0xe1, 0xbc, 0xda, 0xa4, 0xbb, 0x2d, 0x10, 0xce, 0x54, 0x7b, 0xde, 0x68, 0xcd, 0x65, 0xb7,
	0x5b, 0xf9, 0x13, 0x0c, 0x44, 0xfb, 0xf3, 0xe2, 0x75, 0xb8, 0x1f, 0xcd, 0xa7, 0xd8, 0x27, 0xe8,
	0xbb, 0x7c, 0x32, 0xee, 0x37, 0x78, 0x09, 0xc7, 0x52, 0x2f, 0x33, 0x95, 0xe8, 0xf3, 0xea, 0xd1,
	0xd8, 0x27, 0xe8, 0x61, 0xb0, 0xfa, 0x81, 0xf7, 0xdb, 0xfd, 0x16, 0x13, 0x80, 0x37, 0xda, 0xbf,
	0x0b, 0x95, 0x1f, 0x05, 0x95, 0xf2, 0xa1, 0xdd, 0x6d, 0xf3, 0x39, 0x8c, 0xd0, 0xe6, 0x4d, 0x96,
	0xcf, 0x54, 0x16, 0x56, 0xc5, 0x1d, 0xc3, 0x51, 0xc3, 0x90, 0x74, 0x38, 0x07, 0x47, 0x68, 0xd6,
	0xd8, 0x2f, 0x1b, 0xe8, 0x76, 0x18, 0xbc, 0xa0, 0xa4, 0xd1, 0x6e, 0x20, 0x85, 0xad, 0x60, 0x1e,
	0x05, 0xa6, 0xb9, 0x3c, 0xd0, 0xe4, 0x19, 0xf4, 0xf0, 0x0e, 0xde, 0x43, 0x77, 0x20, 0x1d, 0x36,
	0x6e, 0xe0, 0x28, 0x8e, 0x82, 0xea, 0xd4, 0x5b, 0xad, 0xe6, 0xa2, 0x72, 0xd9, 0x78, 0x8d, 0xb6,
	0x8c, 0x9e, 0x47, 0xe2, 0x4b, 0x4a, 0x71, 0xf1, 0x1a, 0x71, 0x73, 0x95, 0x0f, 0xc6, 0xd6, 0x13,
	0x55, 0x65, 0xae, 0x8e, 0x37, 0x7e, 0x30, 0xf9, 0x3b, 0x2a, 0x9e, 0x62, 0x5c, 0xe0, 0x1e, 0x5b,
	0xa8, 0xc3, 0xbb, 0x43, 0x3c, 0x6c, 0xdc, 0x41, 0x40, 0x45, 0x09, 0xa4, 0xde, 0x2c, 0x3c, 0x00,
	0x5d, 0xa9, 0x71, 0x44, 0xfd, 0x9e, 0xfa, 0x13, 0xe8, 0x86, 0xff, 0xa3, 0xc7, 0xd5, 0x79, 0x63,
	0x75, 0x9c, 0x1c, 0x6f, 0x48, 0x69, 0xbb, 0x3c, 0x60, 0x48, 0xda, 0xaf, 0x96, 0xfb, 0x5d, 0x31,
	0xeb, 0xb2, 0xf0, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x49, 0x18, 0xa7, 0xb7, 0x09,
	0x00, 0x00,
}
