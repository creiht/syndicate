// Code generated by protoc-gen-go.
// source: syndicate_api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	syndicate_api.proto

It has these top-level messages:
	RingMsg
	StoreResult
	StatusRequest
	StatusMsg
	EmptyMsg
	RingStatus
	Node
	ModifyMsg
	RingConf
	Conf
	RegisterRequest
	NodeConfig
	Ring
	SearchResult
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type RingMsg struct {
	Version  int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring     []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
	Builder  []byte `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	Deadline int64  `protobuf:"varint,4,opt,name=deadline" json:"deadline,omitempty"`
	Rollback int64  `protobuf:"varint,5,opt,name=rollback" json:"rollback,omitempty"`
}

func (m *RingMsg) Reset()                    { *m = RingMsg{} }
func (m *RingMsg) String() string            { return proto1.CompactTextString(m) }
func (*RingMsg) ProtoMessage()               {}
func (*RingMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StoreResult struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    bool   `protobuf:"varint,2,opt,name=ring" json:"ring,omitempty"`
	Builder bool   `protobuf:"varint,3,opt,name=builder" json:"builder,omitempty"`
	ErrMsg  string `protobuf:"bytes,4,opt,name=ErrMsg" json:"ErrMsg,omitempty"`
}

func (m *StoreResult) Reset()                    { *m = StoreResult{} }
func (m *StoreResult) String() string            { return proto1.CompactTextString(m) }
func (*StoreResult) ProtoMessage()               {}
func (*StoreResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusRequest struct {
	Ring    bool `protobuf:"varint,1,opt,name=ring" json:"ring,omitempty"`
	Builder bool `protobuf:"varint,2,opt,name=builder" json:"builder,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto1.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatusMsg struct {
	Version      int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ringstats    string `protobuf:"bytes,2,opt,name=ringstats" json:"ringstats,omitempty"`
	Builderstats string `protobuf:"bytes,3,opt,name=builderstats" json:"builderstats,omitempty"`
	Master       string `protobuf:"bytes,4,opt,name=master" json:"master,omitempty"`
}

func (m *StatusMsg) Reset()                    { *m = StatusMsg{} }
func (m *StatusMsg) String() string            { return proto1.CompactTextString(m) }
func (*StatusMsg) ProtoMessage()               {}
func (*StatusMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto1.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RingStatus struct {
	Status  bool  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *RingStatus) Reset()                    { *m = RingStatus{} }
func (m *RingStatus) String() string            { return proto1.CompactTextString(m) }
func (*RingStatus) ProtoMessage()               {}
func (*RingStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Node struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Active    bool     `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	Capacity  uint32   `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"`
	Tiers     []string `protobuf:"bytes,4,rep,name=tiers" json:"tiers,omitempty"`
	Addresses []string `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	Meta      string   `protobuf:"bytes,6,opt,name=meta" json:"meta,omitempty"`
	Conf      []byte   `protobuf:"bytes,7,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ModifyMsg struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Id    uint64 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *ModifyMsg) Reset()                    { *m = ModifyMsg{} }
func (m *ModifyMsg) String() string            { return proto1.CompactTextString(m) }
func (*ModifyMsg) ProtoMessage()               {}
func (*ModifyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RingConf struct {
	Status *RingStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Conf   *Conf       `protobuf:"bytes,2,opt,name=conf" json:"conf,omitempty"`
}

func (m *RingConf) Reset()                    { *m = RingConf{} }
func (m *RingConf) String() string            { return proto1.CompactTextString(m) }
func (*RingConf) ProtoMessage()               {}
func (*RingConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RingConf) GetStatus() *RingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RingConf) GetConf() *Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

type Conf struct {
	Conf            []byte `protobuf:"bytes,1,opt,name=conf,proto3" json:"conf,omitempty"`
	RestartRequired bool   `protobuf:"varint,2,opt,name=restartRequired" json:"restartRequired,omitempty"`
}

func (m *Conf) Reset()                    { *m = Conf{} }
func (m *Conf) String() string            { return proto1.CompactTextString(m) }
func (*Conf) ProtoMessage()               {}
func (*Conf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RegisterRequest struct {
	Hostname   string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Addrs      []string `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Tiers      []string `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`
	Disks      int32    `protobuf:"varint,4,opt,name=disks" json:"disks,omitempty"`
	Cores      int32    `protobuf:"varint,5,opt,name=cores" json:"cores,omitempty"`
	Hardwareid string   `protobuf:"bytes,6,opt,name=hardwareid" json:"hardwareid,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type NodeConfig struct {
	Localid uint64 `protobuf:"varint,1,opt,name=localid" json:"localid,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto1.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Ring struct {
	Version int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ring    []byte `protobuf:"bytes,2,opt,name=ring,proto3" json:"ring,omitempty"`
}

func (m *Ring) Reset()                    { *m = Ring{} }
func (m *Ring) String() string            { return proto1.CompactTextString(m) }
func (*Ring) ProtoMessage()               {}
func (*Ring) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type SearchResult struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto1.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SearchResult) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto1.RegisterType((*RingMsg)(nil), "proto.RingMsg")
	proto1.RegisterType((*StoreResult)(nil), "proto.StoreResult")
	proto1.RegisterType((*StatusRequest)(nil), "proto.StatusRequest")
	proto1.RegisterType((*StatusMsg)(nil), "proto.StatusMsg")
	proto1.RegisterType((*EmptyMsg)(nil), "proto.EmptyMsg")
	proto1.RegisterType((*RingStatus)(nil), "proto.RingStatus")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*ModifyMsg)(nil), "proto.ModifyMsg")
	proto1.RegisterType((*RingConf)(nil), "proto.RingConf")
	proto1.RegisterType((*Conf)(nil), "proto.Conf")
	proto1.RegisterType((*RegisterRequest)(nil), "proto.RegisterRequest")
	proto1.RegisterType((*NodeConfig)(nil), "proto.NodeConfig")
	proto1.RegisterType((*Ring)(nil), "proto.Ring")
	proto1.RegisterType((*SearchResult)(nil), "proto.SearchResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RingDist service

type RingDistClient interface {
	Store(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
	Revert(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMsg, error)
	Setup(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error)
}

type ringDistClient struct {
	cc *grpc.ClientConn
}

func NewRingDistClient(cc *grpc.ClientConn) RingDistClient {
	return &ringDistClient{cc}
}

func (c *ringDistClient) Store(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Revert(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Revert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusMsg, error) {
	out := new(StatusMsg)
	err := grpc.Invoke(ctx, "/proto.RingDist/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ringDistClient) Setup(ctx context.Context, in *RingMsg, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := grpc.Invoke(ctx, "/proto.RingDist/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RingDist service

type RingDistServer interface {
	Store(context.Context, *RingMsg) (*StoreResult, error)
	Revert(context.Context, *RingMsg) (*StoreResult, error)
	Status(context.Context, *StatusRequest) (*StatusMsg, error)
	Setup(context.Context, *RingMsg) (*StoreResult, error)
}

func RegisterRingDistServer(s *grpc.Server, srv RingDistServer) {
	s.RegisterService(&_RingDist_serviceDesc, srv)
}

func _RingDist_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Store(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingDist_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Revert(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingDist_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Status(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RingDist_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RingMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RingDistServer).Setup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RingDist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RingDist",
	HandlerType: (*RingDistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _RingDist_Store_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _RingDist_Revert_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RingDist_Status_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _RingDist_Setup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Syndicate service

type SyndicateClient interface {
	AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	ModNode(ctx context.Context, in *ModifyMsg, opts ...grpc.CallOption) (*RingStatus, error)
	SetConf(ctx context.Context, in *Conf, opts ...grpc.CallOption) (*RingStatus, error)
	SetActive(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error)
	GetVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingStatus, error)
	GetGlobalConfig(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingConf, error)
	GetNodeConfig(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingConf, error)
	SearchNodes(ctx context.Context, in *Node, opts ...grpc.CallOption) (*SearchResult, error)
	GetRing(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Ring, error)
	RegisterNode(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*NodeConfig, error)
}

type syndicateClient struct {
	cc *grpc.ClientConn
}

func NewSyndicateClient(cc *grpc.ClientConn) SyndicateClient {
	return &syndicateClient{cc}
}

func (c *syndicateClient) AddNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) RemoveNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/RemoveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) ModNode(ctx context.Context, in *ModifyMsg, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/ModNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SetConf(ctx context.Context, in *Conf, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SetConf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SetActive(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SetActive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetVersion(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingStatus, error) {
	out := new(RingStatus)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetGlobalConfig(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*RingConf, error) {
	out := new(RingConf)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetGlobalConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetNodeConfig(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RingConf, error) {
	out := new(RingConf)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetNodeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) SearchNodes(ctx context.Context, in *Node, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := grpc.Invoke(ctx, "/proto.Syndicate/SearchNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) GetRing(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Ring, error) {
	out := new(Ring)
	err := grpc.Invoke(ctx, "/proto.Syndicate/GetRing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syndicateClient) RegisterNode(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*NodeConfig, error) {
	out := new(NodeConfig)
	err := grpc.Invoke(ctx, "/proto.Syndicate/RegisterNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Syndicate service

type SyndicateServer interface {
	AddNode(context.Context, *Node) (*RingStatus, error)
	RemoveNode(context.Context, *Node) (*RingStatus, error)
	ModNode(context.Context, *ModifyMsg) (*RingStatus, error)
	SetConf(context.Context, *Conf) (*RingStatus, error)
	SetActive(context.Context, *Node) (*RingStatus, error)
	GetVersion(context.Context, *EmptyMsg) (*RingStatus, error)
	GetGlobalConfig(context.Context, *EmptyMsg) (*RingConf, error)
	GetNodeConfig(context.Context, *Node) (*RingConf, error)
	SearchNodes(context.Context, *Node) (*SearchResult, error)
	GetRing(context.Context, *EmptyMsg) (*Ring, error)
	RegisterNode(context.Context, *RegisterRequest) (*NodeConfig, error)
}

func RegisterSyndicateServer(s *grpc.Server, srv SyndicateServer) {
	s.RegisterService(&_Syndicate_serviceDesc, srv)
}

func _Syndicate_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).AddNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).RemoveNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_ModNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ModifyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).ModNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_SetConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Conf)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).SetConf(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).SetActive(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).GetVersion(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_GetGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).GetGlobalConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_GetNodeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).GetNodeConfig(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).SearchNodes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_GetRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).GetRing(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Syndicate_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SyndicateServer).RegisterNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Syndicate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Syndicate",
	HandlerType: (*SyndicateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Syndicate_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Syndicate_RemoveNode_Handler,
		},
		{
			MethodName: "ModNode",
			Handler:    _Syndicate_ModNode_Handler,
		},
		{
			MethodName: "SetConf",
			Handler:    _Syndicate_SetConf_Handler,
		},
		{
			MethodName: "SetActive",
			Handler:    _Syndicate_SetActive_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Syndicate_GetVersion_Handler,
		},
		{
			MethodName: "GetGlobalConfig",
			Handler:    _Syndicate_GetGlobalConfig_Handler,
		},
		{
			MethodName: "GetNodeConfig",
			Handler:    _Syndicate_GetNodeConfig_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _Syndicate_SearchNodes_Handler,
		},
		{
			MethodName: "GetRing",
			Handler:    _Syndicate_GetRing_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _Syndicate_RegisterNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6f, 0xd3, 0x4a,
	0x10, 0x4d, 0x62, 0x3b, 0x1f, 0x93, 0xa4, 0x69, 0xb7, 0xd5, 0xbd, 0xbe, 0x79, 0xba, 0x58, 0x42,
	0x02, 0xaa, 0x06, 0x48, 0xc5, 0x13, 0x4f, 0x15, 0x54, 0xe5, 0xa5, 0x3c, 0xa4, 0x82, 0x37, 0x84,
	0x36, 0xde, 0x6d, 0xbb, 0xaa, 0x63, 0x87, 0xdd, 0x4d, 0x50, 0x7e, 0x14, 0xff, 0x84, 0x1f, 0xc5,
	0xec, 0xd8, 0x4e, 0x9d, 0x10, 0x41, 0x9e, 0x92, 0xdd, 0x9d, 0x33, 0x73, 0xe6, 0xcc, 0x19, 0xc3,
	0xb1, 0x59, 0xa5, 0x42, 0xc5, 0xdc, 0xca, 0xaf, 0x7c, 0xae, 0x46, 0x73, 0x9d, 0xd9, 0x8c, 0x05,
	0xf4, 0x13, 0x7d, 0x81, 0xd6, 0x44, 0xa5, 0x77, 0xd7, 0xe6, 0x8e, 0x0d, 0xa0, 0xb5, 0x94, 0xda,
	0xa8, 0x2c, 0x0d, 0xeb, 0xff, 0xd7, 0x9f, 0x79, 0xac, 0x07, 0xbe, 0xc6, 0xb7, 0xb0, 0x81, 0xa7,
	0x9e, 0x7b, 0x9e, 0x2e, 0x54, 0x22, 0xa4, 0x0e, 0x3d, 0xba, 0x38, 0x84, 0xb6, 0x90, 0x5c, 0x24,
	0x2a, 0x95, 0xa1, 0x4f, 0x00, 0xbc, 0xd1, 0x59, 0x92, 0x4c, 0x79, 0xfc, 0x10, 0x06, 0xee, 0x26,
	0xba, 0x86, 0xee, 0x8d, 0xcd, 0xb4, 0x9c, 0x48, 0xb3, 0x48, 0xec, 0x9f, 0x4b, 0xb4, 0xb7, 0x4b,
	0xb4, 0xd9, 0x01, 0x34, 0x2f, 0xb5, 0x46, 0x72, 0x54, 0xa0, 0x13, 0x8d, 0xa0, 0x7f, 0x63, 0xb9,
	0x5d, 0x98, 0x89, 0xfc, 0xb6, 0x90, 0xc6, 0xae, 0xf1, 0xf5, 0x6d, 0x3c, 0x25, 0x8c, 0x3e, 0x41,
	0x27, 0x8f, 0xdf, 0xd9, 0xdf, 0x11, 0x74, 0x1c, 0xd8, 0x60, 0x84, 0x21, 0x40, 0x87, 0x9d, 0x40,
	0xaf, 0xc8, 0x90, 0xdf, 0x7a, 0x74, 0x8b, 0x34, 0x66, 0xdc, 0x58, 0x4c, 0x9b, 0xd3, 0x00, 0x68,
	0x5f, 0xce, 0xe6, 0x76, 0x85, 0x59, 0xa3, 0x33, 0x00, 0x27, 0x60, 0x5e, 0xc6, 0x45, 0x1a, 0xfa,
	0xf7, 0xc8, 0xa8, 0xac, 0xd9, 0x20, 0x41, 0x34, 0xf8, 0x1f, 0x33, 0x21, 0x19, 0x40, 0x43, 0x09,
	0x0a, 0xf2, 0x1d, 0x88, 0xc7, 0x56, 0x2d, 0x65, 0x21, 0x03, 0xca, 0x18, 0xf3, 0x39, 0x8f, 0x95,
	0x5d, 0x11, 0x81, 0x3e, 0xeb, 0x43, 0x60, 0x15, 0xe6, 0xc1, 0xfa, 0x1e, 0xf2, 0x41, 0xe2, 0x5c,
	0x08, 0x2d, 0x8d, 0x91, 0x06, 0x85, 0x76, 0x57, 0x28, 0xc4, 0x4c, 0x5a, 0x1e, 0x36, 0x89, 0x30,
	0x9e, 0xe2, 0x2c, 0xbd, 0x0d, 0x5b, 0x6e, 0x50, 0xd1, 0x39, 0x74, 0xae, 0x33, 0xa1, 0x6e, 0x1d,
	0x5f, 0xd6, 0x05, 0xef, 0x41, 0xae, 0xa8, 0x72, 0xc7, 0xe5, 0x5d, 0xf2, 0x64, 0x21, 0x8b, 0xee,
	0x73, 0x52, 0xae, 0xa4, 0x1f, 0x7d, 0x80, 0xb6, 0xeb, 0xeb, 0x1d, 0xa6, 0x61, 0x4f, 0x36, 0xba,
	0xea, 0x8e, 0x8f, 0x72, 0x0f, 0x8d, 0x2a, 0x8d, 0xff, 0x57, 0x54, 0x6c, 0x50, 0x40, 0xb7, 0x08,
	0x70, 0x68, 0x54, 0xc8, 0xa7, 0x2c, 0x25, 0xa9, 0x3a, 0xb9, 0xe7, 0x5f, 0x18, 0x60, 0x03, 0x96,
	0x6b, 0xeb, 0x66, 0xa9, 0xb4, 0x14, 0xc5, 0xcc, 0x0c, 0x0c, 0x26, 0xf2, 0x4e, 0x39, 0xb9, 0xcb,
	0x29, 0xa3, 0x20, 0xf7, 0x99, 0xb1, 0x29, 0x9f, 0xc9, 0x47, 0xe2, 0x4e, 0x01, 0x37, 0x36, 0x2f,
	0x3f, 0xe6, 0xfa, 0x78, 0xe5, 0x51, 0x28, 0xf3, 0x60, 0x68, 0x5c, 0x81, 0x3b, 0xc6, 0xe8, 0x41,
	0x43, 0x9e, 0x0c, 0x18, 0xb6, 0x79, 0xcf, 0xb5, 0xf8, 0xce, 0xb5, 0xc4, 0x6e, 0x49, 0xb0, 0xe8,
	0x14, 0xc0, 0x8d, 0xc5, 0xf1, 0x54, 0xe4, 0x94, 0x24, 0x8b, 0x79, 0xb2, 0x9e, 0xd0, 0xc6, 0x26,
	0x44, 0x4f, 0xc1, 0x77, 0x9d, 0xff, 0x65, 0x61, 0xa2, 0x17, 0xd0, 0xbb, 0x91, 0x5c, 0xc7, 0xf7,
	0x85, 0xf9, 0x87, 0x10, 0xa4, 0x58, 0xc3, 0x89, 0xe8, 0x55, 0x34, 0x72, 0x75, 0xc7, 0x3f, 0xeb,
	0xb9, 0xdc, 0xef, 0xb1, 0x6f, 0x76, 0x06, 0x01, 0x2d, 0x0d, 0x3b, 0xa8, 0xe8, 0x8c, 0xb3, 0x1b,
	0xb2, 0xe2, 0x5c, 0x59, 0xa9, 0xa8, 0xc6, 0x46, 0xd0, 0x9c, 0x48, 0x24, 0x62, 0xf7, 0x8c, 0x1f,
	0x43, 0xb3, 0x18, 0xda, 0xc9, 0xfa, 0xbd, 0xb2, 0x53, 0xc3, 0xc3, 0x8d, 0x5b, 0xe7, 0xf1, 0x1a,
	0x51, 0x92, 0x76, 0x31, 0xdf, 0xaf, 0xc4, 0xf8, 0x87, 0x8f, 0x8b, 0x57, 0x7e, 0x74, 0xd8, 0x29,
	0xb4, 0x2e, 0x84, 0x20, 0xdb, 0x57, 0x9b, 0x1e, 0xfe, 0x6e, 0x23, 0xea, 0x06, 0x26, 0x72, 0x96,
	0x2d, 0xe5, 0x9e, 0xf1, 0xaf, 0xa0, 0x85, 0xe6, 0xa6, 0xe0, 0x92, 0xf8, 0xda, 0xec, 0xbb, 0x11,
	0x48, 0x07, 0x7b, 0x21, 0x4b, 0x56, 0x7d, 0xba, 0x3b, 0xf8, 0x0c, 0x1b, 0x91, 0xf6, 0x82, 0xd6,
	0x73, 0x0f, 0x36, 0x63, 0x80, 0x2b, 0x69, 0x3f, 0xe7, 0xae, 0x60, 0x83, 0x22, 0xa4, 0xfc, 0x58,
	0xec, 0xc6, 0xbc, 0x81, 0x01, 0x62, 0xae, 0x92, 0x6c, 0xca, 0x93, 0xd2, 0x80, 0xdb, 0xc0, 0x41,
	0x05, 0x48, 0x4b, 0x55, 0x63, 0x2f, 0xa1, 0x8f, 0xb0, 0x8a, 0x6b, 0x37, 0xd8, 0xed, 0x00, 0xbc,
	0xc6, 0x6f, 0x31, 0xf9, 0xd1, 0x05, 0x98, 0xcd, 0xf0, 0xe3, 0x72, 0x8c, 0x15, 0xc3, 0x22, 0xe4,
	0x39, 0xb4, 0xb0, 0x46, 0x6e, 0xf6, 0x6d, 0x4a, 0xdd, 0x4a, 0x05, 0x0c, 0x7d, 0x0b, 0xbd, 0x72,
	0x6d, 0x69, 0x18, 0xff, 0x94, 0xcf, 0x9b, 0xbb, 0xbc, 0x96, 0xe0, 0x91, 0x78, 0x54, 0x9b, 0x36,
	0xe9, 0xee, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xd7, 0x81, 0xe8, 0xaa, 0x06, 0x00,
	0x00,
}
